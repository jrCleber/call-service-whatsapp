// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model CallCenter {
  callCenterId  Int             @id @default(autoincrement()) @db.Int
  presentation  String          @db.VarChar(1000)
  botName       String          @db.VarChar(50)
  phoneNumber   String          @unique @db.VarChar(25)
  url           String?         @db.VarChar(200)
  companyName   String          @db.VarChar(150)
  createAt      String          @db.VarChar(14)
  loggedAt      String?         @db.VarChar(14)
  updateAt      String?         @db.VarChar(14)
  Attendant     Attendant[]
  CompanySector CompanySector[]
}

model CompanySector {
  sectorId     Int           @id @default(autoincrement()) @db.Int
  sector       String        @db.VarChar(30)
  CallCenter   CallCenter    @relation(fields: [callCenterId], references: [callCenterId])
  callCenterId Int           @db.Int
  Attendant    Attendant[]
  Transaction  Transaction[]
}

model Customer {
  customerId        Int           @id @default(autoincrement()) @db.Int
  name              String?       @db.VarChar(200)
  pushName          String        @db.VarChar(200)
  profilePictureUrl String?       @db.VarChar(500)
  wuid              String        @db.VarChar(150)
  phoneNumber       String        @db.VarChar(25)
  otherPhones       Json?         @db.Json
  createAt          String        @db.VarChar(14)
  updateAt          String?       @db.VarChar(14)
  Tansaction        Transaction[]
  ChatStage         ChatStage?

  // @@unique([wuid, phoneNumber])
}

model Attendant {
  attendantId     Int             @id @default(autoincrement()) @db.Int
  shortName       String          @db.VarChar(50)
  fullName        String?         @db.VarChar(150)
  phoneNumber     String          @db.VarChar(25)
  wuid            String          @db.VarChar(150)
  email           String?         @db.VarChar(200)
  status          AttendantStatus @default(ACTIVE)
  manager         Boolean         @default(false)
  createAt        String          @db.VarChar(14)
  updateAt        String?         @db.VarChar(14)
  CompanySector   CompanySector   @relation(fields: [companySectorId], references: [sectorId])
  companySectorId Int             @db.Int
  CallCenter      CallCenter      @relation(fields: [callCenterId], references: [callCenterId])
  callCenterId    Int             @db.Int
  Tansaction      Transaction[]

  // @@unique([wuid, email, phoneNumber])
}

enum AttendantStatus {
  ACTIVE
  INACTIVE
}

model MessageWA {
  messageId     Int           @id @default(autoincrement()) @db.Int
  header        Json          @db.Json
  body          Json          @db.Json
  sender        Responsible
  wuid          String        @unique @db.VarChar(150)
  createAt      String        @db.VarChar(14)
  status        MessageStatus @default(SENT)
  senderAt      String        @db.VarChar(14)
  deliveryAt    String        @db.VarChar(14)
  readAt        String        @db.VarChar(14)
  Tansaction    Transaction   @relation(fields: [transactionId], references: [transactionId])
  transactionId Int           @db.Int
}

model Transaction {
  transactionId   Int               @id @default(autoincrement()) @db.Int
  subject         Json?             @db.Json
  status          TarnsactionStatus @default(ACTIVE)
  initiated       String            @db.VarChar(14)
  startProcessing String?           @db.VarChar(14)
  finished        String?           @db.VarChar(14)
  protocol        String?           @unique @db.VarChar(100)
  finisher        Responsible?
  Customer        Customer          @relation(fields: [customerId], references: [customerId])
  customerId      Int               @db.Int
  Attendant       Attendant?        @relation(fields: [attendantId], references: [attendantId])
  attendantId     Int?              @db.Int
  Sector          CompanySector?    @relation(fields: [sectorId], references: [sectorId])
  sectorId        Int?              @db.Int
  MessageWA       MessageWA[]
}

model ChatStage {
  stageId    Int       @id @default(autoincrement()) @db.Int
  wuid       String    @unique @db.VarChar(150)
  stage      Stages    @default(initialChat)
  Customer   Customer? @relation(fields: [customerId], references: [customerId])
  customerId Int?      @unique @db.Int
}

enum Stages {
  initialChat
  setName
  checkSector
  setSubject
  transaction
  finishedChat
}

enum MessageStatus {
  SENT
  DELIVERY_ACK
  READ
}

enum TarnsactionStatus {
  ACTIVE
  PROCESSING
  FINISHED
}

enum Responsible {
  C
  A
}
